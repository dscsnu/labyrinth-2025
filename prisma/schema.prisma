// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GameConfig {
  property String @id
  value    String

  @@map("gameconfig")
}

model UserProfile {
  id     String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String
  email  String      @unique
  //
  member TeamMember?

  @@map("userprofile")
}

model Team {
  id              String                @id @unique @db.VarChar(6)
  name            String
  //
  members         TeamMember[]
  levelAssignment TeamLevelAssignment[]

  @@map("team")
}

model TeamMember {
  teamId  String      @map("team_id") @db.Uuid
  userId  String      @unique @map("user_id") @db.Uuid
  isReady Boolean     @default(false) @map("is_ready")
  //
  team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("teammember")
}

model Level {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  targetScore    Int                   @map("target_score")
  //
  teamAssignment TeamLevelAssignment[]

  @@map("level")
}

model TeamLevelAssignment {
  teamId       String  @map("team_id") @db.Uuid
  levelId      String  @map("level_id") @db.Uuid
  sequence     Int
  currentScore Int     @default(0) @map("current_score")
  isFinished   Boolean @default(false) @map("is_finished")
  //
  team         Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  level        Level   @relation(fields: [levelId], references: [id])

  @@id([teamId, levelId])
  @@unique([teamId, sequence])
  @@map("teamlevelassignment")
}

model Spell {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @map("spell_id") @db.Uuid
  rewardScore Int       @map("reward_score")
  numPoints   Int       @map("num_points")
  cooldown    Int
  // 
  pattern     Pattern[]

  @@map("spell")
}

model Pattern {
  id        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numPoints Int                         @map("num_points")
  spellId   String                      @db.Uuid
  // 
  spell     Spell                       @relation(fields: [spellId], references: [id])
  locations PatternLocationAssignment[]

  @@map("pattern")
}

model Location {
  id        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  latitude  Float                       @db.DoublePrecision
  longitude Float                       @db.DoublePrecision
  //
  patterns  PatternLocationAssignment[]

  @@map("location")
}

model PatternLocationAssignment {
  patternId  String   @db.Uuid
  locationId String   @db.Uuid
  //
  pattern    Pattern  @relation(fields: [patternId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([patternId, locationId])
  @@map("patternlocationassignment")
}
