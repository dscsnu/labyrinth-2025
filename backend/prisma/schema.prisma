generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("PRISMA_DATABASE_URL")
}

model GameConfig {
  property String @id
  value    String

  @@map("gameconfig")
}

model UserProfile {
  id        String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  email     String      @unique
  createdAt DateTime    @default(dbgenerated("now()")) @map("created_at")
  //
  member    TeamMember?

  @@map("userprofile")
}

model Team {
  id              String                @id @unique @db.VarChar(6)
  name            String
  //
  members         TeamMember[]
  levelAssignment TeamLevelAssignment[]
  spellAssignment TeamSpellAssignment[]
  spellAttempts   TeamSpellAttempt[]

  @@map("team")
}

model TeamMember {
  teamId  String      @map("team_id") @db.VarChar(6)
  userId  String      @unique @map("user_id") @db.Uuid
  isReady Boolean     @default(false) @map("is_ready")
  //
  team    Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([teamId, userId])
  @@map("teammember")
}

model Level {
  id             String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name           String
  description    String?
  imageUrl String? @map("image_url")
  targetScore    Int                   @map("target_score")
  //
  teamAssignment TeamLevelAssignment[]

  @@map("level")
}

model TeamLevelAssignment {
  teamId       String  @map("team_id") @db.VarChar(6)
  levelId      String  @map("level_id") @db.Uuid
  sequence     Int
  currentScore Int     @default(0) @map("current_score")
  isFinished   Boolean @default(false) @map("is_finished")
  //
  team         Team    @relation(fields: [teamId], references: [id], onDelete: Cascade)
  level        Level   @relation(fields: [levelId], references: [id])

  @@id([teamId, levelId])
  @@unique([teamId, sequence])
  @@map("teamlevelassignment")
}

model Spell {
  id              String                @id @default(dbgenerated("gen_random_uuid()")) @map("spell_id") @db.Uuid
  rewardScore     Int                   @map("reward_score")
  numPoints       Int                   @map("num_points")
  cooldown        Int
  imageUrl String?
  //
  pattern         Pattern[]
  teamAssignment  TeamSpellAssignment[]
  teamsAttempting TeamSpellAttempt[]

  @@map("spell")
}

model Pattern {
  id        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  numPoints Int                         @map("num_points")
  spellId   String                      @db.Uuid @map("spell_id")
  //
  spell     Spell                       @relation(fields: [spellId], references: [id])
  locations PatternLocationAssignment[]

  @@map("pattern")
}

model Location {
  id           String                      @id @db.VarChar(6)
  name         String
  latitude     Float                       @db.DoublePrecision
  longitude    Float                       @db.DoublePrecision
  //
  patterns     PatternLocationAssignment[]
  teamProgress TeamLocationProgress[]

  @@map("location")
}

model PatternLocationAssignment {
  patternId  String   @db.Uuid
  locationId String   @db.VarChar(6)
  //
  pattern    Pattern  @relation(fields: [patternId], references: [id], onDelete: Cascade)
  location   Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  @@id([patternId, locationId])
  @@map("patternlocationassignment")
}

model TeamSpellAssignment {
  teamId            String @map("team_id") @db.VarChar(6)
  spellId           String @map("spell_id") @db.Uuid
  remainingCooldown Int    @default(0) @map("remaining_cooldown")
  //
  team              Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  spell             Spell  @relation(fields: [spellId], references: [id], onDelete: Cascade)

  @@id([teamId, spellId])
  @@map("teamspellassignment")
}

model TeamSpellAttempt {
  id               String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId           String                 @map("team_id") @db.VarChar(6)
  spellId          String                 @map("spell_id") @db.Uuid
  active           Boolean                @default(true)
  createdAt        DateTime               @default(dbgenerated("now()")) @map("created_at")
  //
  team             Team                   @relation(fields: [teamId], references: [id])
  spell            Spell                  @relation(fields: [spellId], references: [id])
  locationProgress TeamLocationProgress[]

  @@unique([teamId, active])
  @@map("teamspellattempt")
}

model TeamLocationProgress {
  attemptId  String           @map("attempt_id") @db.Uuid
  locationId String           @map("location_id") @db.VarChar(6)
  createdAt  DateTime         @default(dbgenerated("now()")) @map("created_at")
  //
  attempt    TeamSpellAttempt @relation(fields: [attemptId], references: [id])
  location   Location         @relation(fields: [locationId], references: [id])

  @@id([attemptId, locationId])
  @@map("teamlocationprogress")
}
